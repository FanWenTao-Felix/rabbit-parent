<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ink.ckx.rabbit.producer.mapper.BrokerMessageMapper">
    <resultMap id="BaseResultMap" type="ink.ckx.rabbit.producer.entity.BrokerMessage">
        <id column="message_id" property="messageId" jdbcType="VARCHAR"/>
        <result column="message" property="message" jdbcType="VARCHAR"/>
        <result column="try_count" property="tryCount" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="next_retry_time" property="nextRetryTime" jdbcType="TIMESTAMP"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        message_id, message, try_count, status, next_retry_time, create_time, update_time
    </sql>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from broker_message
        where message_id = #{messageId,jdbcType=VARCHAR}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        DELETE
        FROM broker_message
        WHERE message_id = #{messageId,jdbcType=VARCHAR}
    </delete>

    <insert id="insert" parameterType="ink.ckx.rabbit.producer.entity.BrokerMessage">
        INSERT INTO broker_message (message_id, message, try_count,
                                    status, next_retry_time, create_time,
                                    update_time)
        VALUES (#{messageId,jdbcType=VARCHAR},
                #{message,jdbcType=VARCHAR},
                #{tryCount,jdbcType=INTEGER},
                #{status,jdbcType=VARCHAR},
                #{nextRetryTime,jdbcType=TIMESTAMP},
                #{createTime,jdbcType=TIMESTAMP},
                #{updateTime,jdbcType=TIMESTAMP})
    </insert>

    <insert id="insertSelective" parameterType="ink.ckx.rabbit.producer.entity.BrokerMessage">
        insert into broker_message
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="messageId != null">
                message_id,
            </if>
            <if test="message != null">
                message,
            </if>
            <if test="tryCount != null">
                try_count,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="nextRetryTime != null">
                next_retry_time,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="messageId != null">
                #{messageId,jdbcType=VARCHAR},
            </if>
            <if test="message != null">
                #{message,jdbcType=VARCHAR},
            </if>
            <if test="tryCount != null">
                #{tryCount,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=VARCHAR},
            </if>
            <if test="nextRetryTime != null">
                #{nextRetryTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="ink.ckx.rabbit.producer.entity.BrokerMessage">
        update broker_message
        <set>
            <if test="message != null">
                message =
                #{message,jdbcType=VARCHAR},
            </if>
            <if test="tryCount != null">
                try_count = #{tryCount,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=VARCHAR},
            </if>
            <if test="nextRetryTime != null">
                next_retry_time = #{nextRetryTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where message_id = #{messageId,jdbcType=VARCHAR}
    </update>

    <update id="updateByPrimaryKey" parameterType="ink.ckx.rabbit.producer.entity.BrokerMessage">
        UPDATE broker_message
        SET message         = #{message,jdbcType=VARCHAR},
            try_count       = #{tryCount,jdbcType=INTEGER},
            status          = #{status,jdbcType=VARCHAR},
            next_retry_time = #{nextRetryTime,jdbcType=TIMESTAMP},
            create_time     = #{createTime,jdbcType=TIMESTAMP},
            update_time     = #{updateTime,jdbcType=TIMESTAMP}
        WHERE message_id = #{messageId,jdbcType=VARCHAR}
    </update>

    <update id="changeBrokerMessageStatus">
        UPDATE broker_message bm
        SET bm.status      = #{brokerMessageStatus,jdbcType=VARCHAR},
            bm.update_time = #{updateTime, jdbcType=TIMESTAMP}
        WHERE bm.message_id = #{brokerMessageId,jdbcType=VARCHAR}
    </update>

    <select id="queryBrokerMessageStatus4Timeout" resultMap="BaseResultMap">
  	<![CDATA[
        SELECT message_id, message, try_count, status, next_retry_time, create_time, update_time
        FROM broker_message bm
        WHERE bm.status = #{brokerMessageStatus,jdbcType=VARCHAR}
          AND bm.next_retry_time < sysdate()
        ]]>
  </select>

    <select id="queryBrokerMessageStatus" resultMap="BaseResultMap">
        SELECT message_id, message, try_count, status, next_retry_time, create_time, update_time
        FROM broker_message bm
        WHERE bm.status = #{brokerMessageStatus,jdbcType=VARCHAR}
    </select>

    <update id="update4TryCount">
        UPDATE broker_message bm
        SET bm.try_count   = bm.try_count + 1,
            bm.update_time = #{updateTime,jdbcType=TIMESTAMP}
        WHERE bm.message_id = #{brokerMessageId,jdbcType=VARCHAR}
    </update>

</mapper>